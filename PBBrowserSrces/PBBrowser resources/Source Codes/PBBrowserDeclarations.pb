; *******************************************************************************;; **   File for declarations of constants and global variables for PBBrowser;; *******************************************************************************;IncludePath  "Zapman libraries/"XIncludeFile "GetTextFromCatalog.pb"XIncludeFile "ApplyColorThemes.pb"XIncludeFile "ZapmanCommon.pb"XIncludeFile "Alert.pb"XIncludeFile "TOM_Functions.pb"XIncludeFile "Pipe.pb"XIncludeFile "FastStringFunctions.pb"XIncludeFile "ExpressionEvaluator.pb"XIncludeFile "GetFontNameAndSize.pb";#PBBPortableMode = #False ; Suggestion from Michael Vogel https://www.purebasic.fr/english/viewtopic.php?p=631763#p631763                       ; By setting #PortableMode to #True and recompiling this code, you'll get a portable version                       ; of PBBrowser, with a folder named "PBBrowser_Data", listed next to PBBrowser.exe, which will                       ; contain its preferences and all other files that are necessary for it to function.                       ; You can then copy PBBrowser.exe and its PBBrowser_Data folder onto a USB key, for example,                       ; so that you can transport it from one computer to another without losing your settings.;; An other way to swith PBBrowser to 'Portable' mode is to send it a command line; beginning by "\PORTABLE" when starting it. Do the both operations below:; 1- Create a shortcut of PBBrowser.exe, click right on the shortcut;    and add " \PORTABLE" (including the first space) to the end of the 'Target' field.;    Then, start allways PBBrowser using this shortcut.; 2- Open "Custom tools" inside The PureBasic Editor, click onto;    'PB Browser', then 'Edit' and add "\PORTABLE " before "%HOME" (with a space between;    "\PORTABLE" and "%HOME").; That's all folks.;; ****************************************************************************** ;Global PureBasicProgAddr$, PBUnderCursor$, PBBFicPrincipalPB$, FicActualPB$, PBBTempFile$ ; Will contain the arguments sent by the PureBasic editor.Global MyAppDataFolder$        ; Address of the folder containing all ressources for PBBrowser (including the .prefs file)Global PBBrowserPrefile$       ; Address of the preferences file.Global PBBFirstLaunch          ; Indicates the first launch of the application.Global BOM                     ; Will contain the BOM found when reading the files.;; ****************************************************************************** ;Global PBBListOfFiles$ = ""    ; Will contain the list of files linked to the main file.Global PBBListOfBinaries$ = "" ; Will contain the list of Binary files linked to the main file.Global PBFunctionList$       ; Will contain the list of native functions.Global PBFunctionListLCase$  ; Same list in LCase() version.; Standard arrow cursor to be displayed over RichEdit gadgets.Global PBBDefaultCursor = LoadCursor_(0, #IDC_ARROW);;; ****************************************************************************** ; Fonts used inside PBBrowser windows and EditorGadgets:;Global PBBAllGadgetsFontGlobal PBBTitleFontGlobal PBBProgressLegendFontGlobal PBBBRefreshFontGlobal PBBPanelsDefaultFontStyle$Global PBBCodeFontStyle$;; ****************************************************************************** ;;                              Special characters;; ****************************************************************************** ;#NonBreakableSpace$ = Chr(160)    ; Used to improve the way line breaks work in result panels. Also used as a position marker to locate file names in those results.#SpecialSpace$ = Chr(8239)        ; Used to separate the searched expression from the type of the expression. Eg: MyProcedure#SpecialSpace(Procedure)#ThisPlaceChar$ = Chr(10157)      ; Chr(10157) = "➭". Used after the 'Set', 'Param', 'Arg' mentions, into the 'Found in...' panel.#ItsHereChar$   = Chr(9655)       ; Chr(9655)  = hollow arrow to the right. Used after Element name in the 'Found in...' panel, to signal the position of the element.#RefreshSymbol$ = Chr(10227)      ; Chr(10227) = arrow rotating on itself. Used for the 'Refresh' button.#HamburgerMenuSymbol$ = Chr(9776) ; Chr(9776) = "☰". Used for the burger menu into the result panels.#BulletChar$ = Chr(8226)          ; Chr(8226) = "•". Used in the result panels.;; ****************************************************************************** ;;              Parameters for the arrow buttons into result panels.;; ****************************************************************************** ;#PBBRTFMarker$ = "PBBMark_:" ; Will be used to identify images inserted in RichEdit gadgets.#PBBLeftArrowMarker$ = "Previous" ; Used only in the code as the name for the << navigation button.#PBBRightArrowMarker$ = "Next"    ; Used only in the code as the name for the >> navigation button.#PBBLeftArrow$ = Chr(9668) ; LeftArrow Char          ; Substitution character when the OS version doesn't support embedding images in text.#PBBRightArrow$ = Chr(9658) ; Right Arrow char       ; Substitution character when the OS version doesn't support embedding images in text.#PBBArrowsFontStyle$ = "Bold,Size(12)" ; Font for the substitution characters.;Global CharButtonsIf OSVersion() <= #PB_OS_Windows_Server_2008_R2  ; The program is running on Windows 7 or an earlier version,  ; unable to display an image in RichEdit. As an alternative  ; solution, we will display the characters #PBBLeftArrow$ and #PBBRightArrow$  CharButtons = #TrueElse  CharButtons = #FalseEndIf;; *********************************************************;            Definition of element types;#OutOfElementsName = "OutOfElements";Enumeration PBBTypes  #PBBProcedure       ; Element of type 'Procedure'.  #PBBStructure       ; Same for structures  #PBBMacro           ; Same for macros  #PBBEnumeration     ; Same for enumerations  #PBBInterface       ; Same for interfaces  #PBBLabel           ; Same for labels  #PBBConstante       ; Same for constants  #PBBVariable        ; Same for variables  #EndEnumPBBElementTypes ; Signals the end of the elements found in the files  #PBBNativeFunction  ; Same for native PureBasic functions  #PBBBasicKeyword    ; Same for Basic keywords (While, Wend, If, Then, etc.)  #EndEnumPBBTypes    ; Signals the end of the list  #NotAnElementEndEnumeration;; Assign a name for each type:TypesList$ = "Procedure,Structure,Macro,Enumeration,Interface,Label,Constante,Variable,,PBNativeFunction,PBKeyword";; Register these names in the PBBTypeNames$() arrayGlobal Dim PBBTypeNames$(#EndEnumPBBTypes - 1)For ct = 0 To (#EndEnumPBBTypes - 1)  PBBTypeNames$(ct) = StringField(TypesList$, ct + 1, ",")Next;; The element #PBBVariable will be the only one that will be split into several; categories. These categories are listed below:#PBBVariableSpecies$ = "Global,Shared";; ************************************************************;                   Element arrays;; The following arrays will be used to complete various stages of exploration,; in order to obtain the lists of elements (procedures, structures, enumerations, etc.) that; appear in the examined files.;; ListOfAllElementsNbr() will contain the number of elements; found for a given element type.Global Dim ListOfAllElementsNbr(#EndEnumPBBElementTypes - 1);; ListOfUsedElementsNbr() will contain the number of elements; used for a given element type.Global Dim ListOfUsedElementsNbr(#EndEnumPBBElementTypes - 1);; ListOfAllElementsColor() will contain the colors to be used to color; each element in the code.Global Dim ListOfAllElementsColor(#EndEnumPBBTypes - 1);; The ListCompletionAll and ListCompletionUsed arrays will indicate if the; arrays above have already been completed by the file exploration.Global Dim ListCompletionAll(#EndEnumPBBElementTypes - 1)Global Dim ListCompletionUsed(#EndEnumPBBElementTypes - 1);; For the first exploration phase, the following array will contain the stage at which; the completion procedure was interrupted during background work.Global Dim ListCompletionStage(#EndEnumPBBElementTypes - 1);; For the first exploration phase, the following array will contain the file name; being examined during background work.Global Dim ListCompletionReference$(#EndEnumPBBElementTypes - 1);;; **************************************************************;    Values for the completion state of the element list;Enumeration ListCompletionState ; Current state of completion for a given element type.  #ListCompletion_Undone  #ListCompletion_Pending  #ListCompletion_StageCompleted  #ListCompletion_Done  #ListCompletion_PrintedEndEnumeration;Enumeration CompletionState ; General completion state  #Completion_Completed  #Completion_Uncomplete  #Completion_ErrorEndEnumeration;; *************************************************************;    Structure of the 'ElementsList()' which will contain;        the list of various elements of the examined code.;Structure Elements  Name.s                ; Name of the element.  NameLCase.s           ; Name of the element in lowercase, and without the type, for structured or typed variables.  Type.l                ; Element type (procedure, structure, constant, variable, etc.).  Used.b                ; Indicates if the element is marked as 'used' by the program.  FileName.s            ; .pb file where the element is defined.  Declaration.s         ; Declaration line of the element  DeclarationDetails.s  ; Used only for constants (contains the name of the enumeration where                        ;   the constant is declared) and procedures (contains the line where the procedure is declared).  VariableSpecies.s     ; Used only for variables. Specifies the category (Global, Shared, List, Array, Var, Map).  StartingLine.l        ; Line number where the element is declared in the code  EndingLine.l          ; Line number at the end of the element ('EndProcedure', for example).  StartingPos.l         ; Exact position of the start of the element in the code.  EndingPos.l           ; Position of the end of the element.  Parents.s             ; List of indices of 'Parents' (elements that contain the current element).  Children.s            ; List of indices of 'Children' (elements contained by the current element).  OutOfElementLinePos.s ; Positions (files and line numbers) where the element is referenced in the main code.  Value.s               ; Used only for constants (constant value).  Comment.s             ; Contains the comments for elements that have no code.EndStructure;Global NewList ElementsList.Elements();; *********************************************************; Definition of the different panels of the 'PannelGadgets';Enumeration PBBPanels ; Numbers assigned to panels  ; MainPBBPanel  #FilePBBPanel  #ListPBBPanel  #DetailPBBPanel  #FoundInFilesPBBPanel  ;  ; ListPBBPanel  #ProcPBBPanel  #StructurePBBPanel  #MacroPBBPanel  #EnumPBBPanel  #InterfacePBBPanel  #LabelPBBPanel  #ConstantePBBPanel  #VariablePBBPanel  #EndEnumPBBPanelsEndEnumeration;; Assign a name for each panel:Global Dim PBBPanelNames$(#EndEnumPBBPanels - 1)TypesList$ = "Files,Lists,Details,FoundIn,Procedures,Structures,Macros,Enumerations,Interfaces,Labels,Constantes,Variables"; Store these names in the PBBPanelNames$() arrayFor ct = 0 To (#EndEnumPBBPanels - 1)  PBBPanelNames$(ct) = StringField(TypesList$, ct + 1, ",")Next;; The following arrays will provide details about each panel:Global Dim NoPBBPanel(#EndEnumPBBPanels - 1)Global Dim NoGadgetPBBPanel(#EndEnumPBBPanels - 1)Global Dim NoREGadgetOfPBBPanel(#EndEnumPBBPanels - 1);; The following will create a bridge between ListPBBPanel; and element types, specifying which types of elements are displayed; by each panel.Global Dim TypeElementOfPBBPanel(#EndEnumPBBPanels - 1)TypeElementOfPBBPanel(#FilePBBPanel) = #NotAnElementTypeElementOfPBBPanel(#ListPBBPanel) = #NotAnElementTypeElementOfPBBPanel(#DetailPBBPanel) = #NotAnElementTypeElementOfPBBPanel(#FoundInFilesPBBPanel) = #NotAnElementTypeElementOfPBBPanel(#ProcPBBPanel) = #PBBProcedureTypeElementOfPBBPanel(#StructurePBBPanel) = #PBBStructureTypeElementOfPBBPanel(#MacroPBBPanel) = #PBBMacroTypeElementOfPBBPanel(#EnumPBBPanel) = #PBBEnumerationTypeElementOfPBBPanel(#InterfacePBBPanel) = #PBBInterfaceTypeElementOfPBBPanel(#LabelPBBPanel) = #PBBLabelTypeElementOfPBBPanel(#ConstantePBBPanel) = #PBBConstanteTypeElementOfPBBPanel(#VariablePBBPanel) = #PBBVariable;; *********************************************************;; The following enumerations will be used to manage; background tasks.;Enumeration PBB_PriorityMode ; Managing display for background tasks.  #WorkInBackGround  #ShowCompletionWindow  #FinishCompletionNowEndEnumeration;Enumeration PBB_BackgroundTasksState ; Execution state of background tasks.  #BackgroundTasksUncompleted  #BackgroundTasksHavePriority  #BackgroundTasksCompleted  #BackgroundTasksMustRestartEndEnumeration;; ****************************************************************************** ;;                        For keyboard shortcuts:;Enumeration PBB_Menus  #PBBMenu_Return  #PBBMenu_Escape  #PBBMenu_Find  #PBBMenu_THAT  #PBBMenu_Prefs  #PBBMenu_Up  #PBBMenu_Down  #PBBMenu_PageUp  #PBBMenu_PageDown  #PBBMenu_SetShortcut  #PBBMenu_NextPanel  #PBBMenu_PreviousPanel  #PBBMenu_NextPage  #PBBMenu_PreviousPageEndEnumeration;Enumeration REMenuItems  #REM_ZoomIn = 100  #REM_ZoomOut  #REM_ZoomReset  #REM_FindInPannel  #REM_CopyAll  #REM_SaveAsText  #REM_SaveAsRTFEndEnumeration;; ******************************************************************************;;    For storing the gadget numbers of the main window:;Structure PBBGadgets  PBBWindow.i  AdrTitle.i  Adr_gadget.i  BChangeAdresse.i  SearchedExpressionTitle.i  SearchedExpression_gadget.i  BSearchExpression.i  GLine.i  TProgressBar.i  EProgressBar.i  BStats.i    MainPanelGadget.i  ListsPGadget.i  BAbout.i  BStick.i  BLanguage.i  BQuit.i  BRefresh.i  BREMenu.i  ;  REMenu.i  IWhiteOver.i  Disabled.i  Menu.i  ToolTip.iEndStructure;Global GPBBGadgets.PBBGadgets;;; ******************************************************************************;;                  For managing item searches:;Structure LastSearchDetails  ElementName$  ElementType.i  TypeName$EndStructure;Enumeration TypeOfSearch  #NoSearch = -1  #DoManualSearch = -2  #DoProgrammedSearch = -3  #FindAnyType = -4  #FindFollowedByParentheses = -5  #FindNotFollowedByParentheses = -6EndEnumeration;; ******************************************************************************;; For managing navigation within the 'Details' and 'Found in...' panels:;Structure SearchDetails  Search_Details.LastSearchDetails  Search_DetailScrollPos.Point  Search_FoundInScrollPos.PointEndStructure;Global NewList ListOfSearchs.SearchDetails();; ******************************************************************************;;               For managing file cache memory:;Enumeration ValuesForCheckFileUpdating  #FileIsUpdated  #FileWasUpToDate  #FileMustBeUpdated  #FileDoesntExist  #FileHasBeenDeletedEndEnumeration;; *********************************************************;    List of PureBasic Keywords that can preceed a variable name;#OperatorAsWord$ = ",If,ElseIf,While,Until,Select,Case,Default,With,To,ProcedureReturn,And,Or,Xor,Not,Protected,Global,Static,Shared,Define,";;; ******************************************************************************;; The following is a backup copy of the PureBasic preferences file,; for values essential to PBBrowser. This allows it to run; on a machine where PureBasic is not installed.Global PBPrefSecure$PBPrefSecure$ = "ASMKeywordColor = 7490450" + #CR$ + "BackgroundColor = 14680063" + #CR$ + "BasicKeywordColor = 6710784" + #CR$PBPrefSecure$ + "CommentColor = 11184640" + #CR$ + "ConstantColor = 7490450" + #CR$ + "LabelColor = 0" + #CR$ + "NormalTextColor = 0" + #CR$PBPrefSecure$ + "NumberColor = 0" + #CR$ + "OperatorColor = 0" + #CR$ + "PointerColor = 0" + #CR$ + "PureKeywordColor = 6710784" + #CR$PBPrefSecure$ + "SeparatorColor = 0" + #CR$ + "StringColor = 14643200" + #CR$ + "StructureColor = 0" + #CR$ + "LineNumberColor = 8421504" + #CR$PBPrefSecure$ + "LineNumberBackColor = 14155775" + #CR$ + "MarkerColor = 11184640" + #CR$ + "CurrentLineColor = 12058623" + #CR$PBPrefSecure$ + "SelectionColor = 14120960" + #CR$ + "SelectionFrontColor = 16777215" + #CR$ + "CursorColor = 0" + #CR$PBPrefSecure$ + "Debugger_LineColor = 16771304" + #CR$ + "Debugger_LineSymbolColor = 16771304" + #CR$ + "Debugger_ErrorColor = 255" + #CR$PBPrefSecure$ + "Debugger_ErrorSymbolColor = 255" + #CR$ + "Debugger_BreakPointColor = 16776960" + #CR$PBPrefSecure$ + "Debugger_BreakpoinSymbolColor = 16776960" + #CR$ + "DisabledBackColor = 16316664" + #CR$ + "GoodBraceColor = 6710784" + #CR$PBPrefSecure$ + "BadBraceColor = 255" + #CR$ + "ProcedureBackColor = 14680063" + #CR$ + "CustomKeywordColor = 6684672" + #CR$PBPrefSecure$ + "Debugger_WarningColor = 53503" + #CR$ + "Debugger_WarningSymbolColor = 53503" + #CR$ + "IndentColor = 11184640" + #CR$PBPrefSecure$ + "ModuleColor = 0" + #CR$ + "SelectionRepeatColor = 5746176" + #CR$ + "PlainBackground = 14680063" + #CR$PBPrefSecure$ + "EditorFontName = Consolas" + #CR$ + "EditorFontSize = 10";; ******************************************************************************;; The following files will be embedded into the executable, and then extracted; to the preferences folder on the first launch of the executable.;IncludePath  "../Images/";DataSection  BNext:   IncludeBinary "Next.jpg"  BNextEnd:     BPrevious:   IncludeBinary "Previous.jpg"  BPreviousEnd:     BNoNext:   IncludeBinary "NoNext.jpg"  BNoNextEnd:     BNoPrevious:   IncludeBinary "NoPrevious.jpg"  BNoPreviousEnd:     BDarkNext:   IncludeBinary "DarkNext.jpg"  BDarkNextEnd:     BDarkPrevious:   IncludeBinary "DarkPrevious.jpg"  BDarkPreviousEnd:     BDarkNoNext:   IncludeBinary "DarkNoNext.jpg"  BDarkNoNextEnd:     BDarkNoPrevious:   IncludeBinary "DarkNoPrevious.jpg"  BDarkNoPreviousEnd:   ;  IncludePath  "../Catalogs/"  ;  BCatalogFR:   IncludeBinary "Francais\PBBrowser.catalog"  BCatalogFREnd:     BIntroFR:   IncludeBinary "Francais\IntroPBBrowser.rtf"  BIntroFREnd:     BCatalogEN:   IncludeBinary "English\PBBrowser.catalog"  BCatalogENEnd:     BIntroEN:   IncludeBinary "English\IntroPBBrowser.rtf"  BIntroENEnd:     BCatalogIT:   IncludeBinary "Italiano\PBBrowser.catalog"  BCatalogITEnd:     BIntroIT:   IncludeBinary "Italiano\IntroPBBrowser.rtf"  BIntroITEnd:     BCatalogRU:   IncludeBinary "Russian\PBBrowser.catalog"  BCatalogRUEnd:     BIntroRU:   IncludeBinary "Russian\IntroPBBrowser.rtf"  BIntroRUEnd:   ;  IncludePath  "../"  ;  PBFunction:   IncludeBinary "PBFunctionList.Data"  PBFunctionEnd:       APIFunction:   IncludeBinary "APIFunctionListing.txt"  APIFunctionEnd: EndDataSection;; ******************************************************************************;; The list of Basic keywords is not long. Rather than keeping it in a file,; it is stored here as data.;DataSection	PBBasicKeyWords:   Data.s "And", "Array", "As", "Align", "Break", "CallDebugger", "Case", "CompilerCase", "CompilerDefault", "CompilerElse", "CompilerElseIf", "CompilerEndIf", "CompilerEndSelect"  Data.s "CompilerError", "CompilerIf", "CompilerSelect", "Continue", "Data", "DataSection", "EndDataSection", "Debug", "DebugLevel", "Declare", "DeclareC"  Data.s "DeclareCDLL", "DeclareDLL", "Default", "Define", "Dim", "DisableASM", "DisableDebugger", "DisableExplicit", "DeclareModule", "Else", "ElseIf", "EnableASM"  Data.s "EnableDebugger", "EnableExplicit", "End", "EndEnumeration", "EndIf", "EndImport", "EndInterface", "EndMacro", "EndProcedure", "EndDeclareModule", "EndModule"  Data.s "EndSelect", "EndStructure", "EndStructureUnion", "EndWith", "Enumeration", "Extends", "FakeReturn", "For", "Next", "ForEach"  Data.s "ForEver", "Global", "Gosub", "Goto", "If", "Import", "ImportC", "IncludeBinary", "IncludeFile", "IncludePath", "Interface", "List", "Macro", "Map", "MacroExpandedCount"  Data.s "Module", "NewList", "Not", "Or", "Procedure", "ProcedureC", "ProcedureCDLL", "ProcedureDLL", "ProcedureReturn", "Protected", "Prototype"  Data.s "PrototypeC", "Read", "ReDim", "Repeat", "Until", "Restore", "Return", "Runtime", "Select", "Shared", "Static", "Step", "Structure", "StructureUnion"  Data.s "Swap", "To", "Wend", "While", "With", "XIncludeFile", "XOr", "UseModule", "UnuseModule", "UndefineMacro"  Data.s "EndPBBasicKeyWords"EndDataSection; IDE Options = PureBasic 6.12 LTS (Windows - x86); CursorPosition = 69; FirstLine = 62; EnableXP; DPIAware; UseMainFile = ..\..\PBBrowser.pb