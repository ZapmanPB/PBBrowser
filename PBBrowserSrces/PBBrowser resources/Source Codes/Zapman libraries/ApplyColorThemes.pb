;; **************************************************************************;;                             ApplyColorThemes;                               Windows only;                            Zapman - Dec 2024;;    This library offers a set of functions to implemente a color-themes;                    support into your applications.;  • The EditThemesColors() function allows you to set a couple of colors for;    background and foreground and give a name to this set.;  • The SetGadgetsColorsFromTheme() will apply this theme to a list of all gadgets.;  • GetColorThemesFromPreferences() and SetColorThemesToPreferences() allows;    you to record and restore a set of themes to and from a .prefs file.;  • ThemesDemoWindow() shows an example of use for this set of functions.;; **************************************************************************;; "ZapmanColorRequester.pb" is included by the third part of this library.;;; ******************************************************************;;-        1--- First PART: FUNCTIONS FOR SETTING THEMES ---;XIncludeFile "SetGadgetColorEx.pb"XIncludeFile "ZapmanColorRequester.pb";Structure InterfaceColorsStruct  PresetName.s  Editable.b  BackgroundColor.l  TextColor.l  DefaultBackgroundColor.l  DefaultTextColor.lEndStructure;Global NewList InterfaceColorPresets.InterfaceColorsStruct();Procedure TC_GetColorFromType(ColorType$, *currentColor.InterfaceColorsStruct)  If ColorType$ = "BackgroundColor"    ProcedureReturn *currentColor\BackgroundColor  ElseIf ColorType$ = "TextColor"    ProcedureReturn *currentColor\TextColor  EndIfEndProcedure;Procedure TC_GetRealColorFromType(ColorType$, *currentColor.InterfaceColorsStruct)  ;   Protected Color = TC_GetColorFromType(ColorType$, *currentColor)  ;  ProcedureReturn GetRealColorFromType(ColorType$, Color)EndProcedure;Procedure TC_SetColorFromType(ColorType$, Color, *currentColor.InterfaceColorsStruct)  ;  If ColorType$ = "BackgroundColor"    *currentColor\BackgroundColor = Color  ElseIf ColorType$ = "TextColor"    *currentColor\TextColor = Color  EndIfEndProcedure;Procedure TC_DisableResetGadget(*currentColor.InterfaceColorsStruct, BDefault)  ;  If *currentColor\Editable And (*currentColor\DefaultBackgroundColor <> -2)  And (*currentColor\DefaultBackgroundColor <> *currentColor\BackgroundColor Or *currentColor\DefaultTextColor <> *currentColor\TextColor)    TC_DisableColorGadgets = #False  Else    TC_DisableColorGadgets = #True  EndIf  ;  DisableGadget(BDefault, TC_DisableColorGadgets)  ;EndProcedure;Procedure TC_DisableColorGadgets(*currentColor.InterfaceColorsStruct, *ECGadgets.EditColorGadgetsStruct, BDefault)  ;  TC_DisableResetGadget(*currentColor.InterfaceColorsStruct, BDefault)    ;  If *currentColor\Editable    TC_DisableColorGadgets = #False  Else    TC_DisableColorGadgets = #True  EndIf  DisableGadget(*ECGadgets\Red_Input, TC_DisableColorGadgets)  DisableGadget(*ECGadgets\Green_Input, TC_DisableColorGadgets)  DisableGadget(*ECGadgets\Blue_Input, TC_DisableColorGadgets)  DisableGadget(*ECGadgets\Hue_Input, TC_DisableColorGadgets)  DisableGadget(*ECGadgets\Sat_Input, TC_DisableColorGadgets)  DisableGadget(*ECGadgets\Lum_Input, TC_DisableColorGadgets)  DisableGadget(*ECGadgets\HexColor_Input, TC_DisableColorGadgets)  ;EndProcedure;Procedure TC_EnableDisableComboReadOnly(TempPresetsEditable, gadgetPreset, BDel)  ;  ; Enable/disable edition for ComboGadget, regarding the 'TempPresets()\Editable' field:  ;  Structure COMBOBOXINFO     cbSize.l    rcItem.rect    rcButton.rect    stateButton.l    hwndCombo.l    hwndItem.l    hwndList.l  EndStructure  Protected cbi.comboboxinfo\cbSize = SizeOf(COMBOBOXINFO)  ;  GetComboBoxInfo_(GadgetID(gadgetPreset), @cbi)  If TempPresetsEditable    SendMessage_(cbi\hwndItem, #EM_SETREADONLY, 0,0)    DisableGadget(BDel, #False)  Else    SendMessage_(cbi\hwndItem, #EM_SETREADONLY, 1,0)    DisableGadget(BDel, #True)  EndIfEndProcedure;Procedure SetThemesColors()  ClearList(InterfaceColorPresets())  AddElement(InterfaceColorPresets())  InterfaceColorPresets()\PresetName = "Standard"  InterfaceColorPresets()\Editable = #False  InterfaceColorPresets()\BackgroundColor = #PB_Default  InterfaceColorPresets()\TextColor = #PB_Default  AddElement(InterfaceColorPresets())  InterfaceColorPresets()\PresetName = "Lemon"  InterfaceColorPresets()\Editable = #True  InterfaceColorPresets()\BackgroundColor = RGB(239, 255, 234)  InterfaceColorPresets()\TextColor = RGB(0, 50, 0)  AddElement(InterfaceColorPresets())  InterfaceColorPresets()\PresetName = "Light gray"  InterfaceColorPresets()\Editable = #True  InterfaceColorPresets()\BackgroundColor = RGB(230, 231, 232)  InterfaceColorPresets()\TextColor = RGB(47, 47, 49)  AddElement(InterfaceColorPresets())  InterfaceColorPresets()\PresetName = "Dark gray"  InterfaceColorPresets()\Editable = #True  InterfaceColorPresets()\BackgroundColor = RGB(30, 45, 45)  InterfaceColorPresets()\TextColor = RGB(240, 240, 240)  AddElement(InterfaceColorPresets())  InterfaceColorPresets()\PresetName = "Brown sugar"  InterfaceColorPresets()\Editable = #True  InterfaceColorPresets()\BackgroundColor = RGB(61, 45, 45)  InterfaceColorPresets()\TextColor = RGB(240, 240, 200)  AddElement(InterfaceColorPresets())  InterfaceColorPresets()\PresetName = "Matrix"  InterfaceColorPresets()\Editable = #True  InterfaceColorPresets()\BackgroundColor = RGB(0, 40, 40)  InterfaceColorPresets()\TextColor = RGB(90, 255, 160)  AddElement(InterfaceColorPresets())  InterfaceColorPresets()\PresetName = "Rapsody"  InterfaceColorPresets()\Editable = #True  InterfaceColorPresets()\BackgroundColor = RGB(0, 10, 50)  InterfaceColorPresets()\TextColor = RGB(160, 255, 210)  AddElement(InterfaceColorPresets())  InterfaceColorPresets()\PresetName = "Raspberry"  InterfaceColorPresets()\Editable = #True  InterfaceColorPresets()\BackgroundColor = $7E00A8  InterfaceColorPresets()\TextColor = $CDFFCC  ForEach InterfaceColorPresets()    InterfaceColorPresets()\DefaultBackgroundColor = InterfaceColorPresets()\BackgroundColor    InterfaceColorPresets()\DefaultTextColor = InterfaceColorPresets()\TextColor  Next  SelectElement(InterfaceColorPresets(), 0)EndProcedure;Procedure SetGadgetsColorsFromTheme(MainWindow, *currentColor.InterfaceColorsStruct, GadgetList$, Colortype$ = "")  ;  ; Set colors (background and text colors) to a list of gadgets.  ; GadgetList$ must be formated as this:  ; "GadgetNumber1,GadgetNumber2,GadgetNumber3,GadgetNumber4,..."  ;  ; If the parameter 'Colortype$' is empty, both BackgroundColor and TextColor will be  ; applied to the gadgets.  ; If the parameter 'Colortype$' contains "BackgroundColor" or "TextColor",  ; only the corresponding color will applied to the gadgets.  ;  ; Canvas type gadgets that are included in the 'GadgetList$' list will be entirely repainted  ; with an intermediate color between *currentColor\BackgroundColor and *currentColor\TextColor.  ; You should therefore only include in this list the canvases used as separation lines in your  ; window.  ;  Protected PosInGadgetList = 0, Gadget  ;  If Colortype$ = "" Or Colortype$ = "BackgroundColor"    SetWindowColor(MainWindow, *currentColor\BackgroundColor)  EndIf  ;  Repeat    PosInGadgetList + 1    Gadget = Val(StringField(GadgetList$, PosInGadgetList, ","))    If IsGadget(Gadget)      If GadgetType(Gadget) = #PB_GadgetType_Canvas        RepaintCanvasSeparator(Gadget, CalculateBorderColor(*currentColor\TextColor, *currentColor\BackgroundColor))      Else        If Colortype$ = "" Or Colortype$ = "BackgroundColor"          SetGadgetColorEx(Gadget, #PB_Gadget_BackColor, *currentColor\BackgroundColor)        EndIf        If Colortype$ = "" Or Colortype$ = "TextColor"          SetGadgetColorEx(Gadget, #PB_Gadget_FrontColor, *currentColor\TextColor)        EndIf      EndIf    EndIf  Until StringField(GadgetList$, PosInGadgetList, ",") = ""EndProcedure;Procedure SetFontAndGadgetsColors(MainWindow, *currentColor.InterfaceColorsStruct, GadgetList$, Colortype$ = "")  ;  Protected PosInGadgetList = 0, Gadget  ;  SetGadgetsColorsFromTheme(MainWindow, *currentColor, GadgetList$, Colortype$)  ;  Global PBBAllGadgetsFont  If PBBAllGadgetsFont = 0    PBBAllGadgetsFont = FontID(LoadFont(#PB_Any, "Segoe UI", 9))  EndIf  ;  Repeat    PosInGadgetList + 1    Gadget = Val(StringField(GadgetList$, PosInGadgetList, ","))    If IsGadget(Gadget)      SetGadgetFont(Gadget, PBBAllGadgetsFont)    EndIf  Until StringField(GadgetList$, PosInGadgetList, ",") = ""  ;EndProcedure;Procedure EditThemesColors()  ;  Shared ECGadgets.EditColorGadgetsStruct  ;  If ListSize(InterfaceColorPresets()) < 1    ; Create an InterfaceColorPresets() if none exists:    SetThemesColors()  EndIf  ;  Protected NewList TempPresets.InterfaceColorsStruct()  ClearList(TempPresets())  CopyList(InterfaceColorPresets(), TempPresets())  ;  ; Window and gadget numbers:  Protected gadgetPreview, gadgetPreset, BWidth, BAdd, BDel  Protected OptionText, OptionBackground, TWidth, TxRed, TBWidth, TxGreen, TxBlue, TxPreset, BDefault, BPredef, BCancel, BOk  ; Other variables:  Protected WWidth, WMargins, VPos, GadgetList$, Index  Protected *TempPresetsAdr, mIndex, Color, NcurrentColor, GetOut, initialColor  ;  WWidth = 480  WMargins = 15  ;  ECGadgets\EditColorWindow = OpenWindow(#PB_Any, 0, 0, WWidth, 350, GetTextFromCatalog("ThemeColors"), #PB_Window_SystemMenu | #PB_Window_ScreenCentered | #PB_Window_Invisible)  ;  If ECGadgets\EditColorWindow    ApplyDarkModeToWindow(ECGadgets\EditColorWindow)    StickyWindow(ECGadgets\EditColorWindow, 1)    ;    VPos = WMargins    ;    TxPreset = TextGadget(#PB_Any, WMargins, VPos + 2, 100, 20, GetTextFromCatalog("Presets"))    GadgetList$ + Str(TxPreset) + ","    gadgetPreset = ComboBoxGadget(#PB_Any, WMargins + 105, VPos, 180, 22, #PB_ComboBox_Editable)    ForEach TempPresets()      AddGadgetItem(gadgetPreset, -1, TempPresets()\PresetName)    Next    SelectElement(TempPresets(), ListIndex(InterfaceColorPresets()))    SetGadgetState(gadgetPreset, ListIndex(TempPresets()))    GadgetList$ + Str(gadgetPreset) + ","    BWidth = 22    BAdd = ButtonGadget(#PB_Any, WWidth - WMargins - 2*BWidth - 5, VPos, BWidth, 22, "+")    GadgetList$ + Str(BAdd) + ","    BDel = ButtonGadget(#PB_Any, WWidth - WMargins - BWidth, VPos, BWidth, 22, "-")    GadgetList$ + Str(BDel) + ","        ;    VPos + 35    Frame1 = CanvasGadget(#PB_Any, WMargins, VPos, WWidth - 2*WMargins, 1)    GadgetList$ + Str(Frame1) + ","    ;    BWidth = 140    VPos + 5    OptionBackground = OptionGadget(#PB_Any, 100, VPos, BWidth, 25, GetTextFromCatalog("BackgroundColor"))    GadgetList$ + Str(OptionBackground) + ","    ;    ; Select OptionBackground by default:    SetGadgetState(OptionBackground, 1)    ECGadgets\Color = TempPresets()\BackgroundColor    ECGadgets\SGC_ColorType$ = "BackgroundColor"    ;    OptionText = OptionGadget(#PB_Any, WWidth - BWidth - 20, VPos, BWidth, 25, GetTextFromCatalog("TextColor"))    GadgetList$ + Str(OptionText) + ","    ;    ECGadgets\MarginTop = VPos + 35    MarginCircular = 15    ECGadgets\MarginButtonsBottom = MarginCircular    ECGadgets\MarginButtonsTop = 0    ECGadgets\MarginInterBlocks = 31    ECGadgets\MarginLeft = MarginCircular    ECGadgets\MarginRight = MarginCircular    ECGadgets\HexFieldVPos = -2      ; Position of the 'Hexa value' fields (-1 is at the bottom-left of the window, -2 is at Interblocks-right).    ECGadgets\HorizGadgetsMargin = 5 ; Vertical margins between gadgets.    ;    ECGadgets\BackColor = GetRealColorFromType("BackgroundColor", TempPresets()\BackgroundColor)    ; Background color for all canvas cursors.    ECGadgets\TextColor = GetRealColorFromType("TextColor", TempPresets()\TextColor)                ; Color used to calculate gadgets borders color.                                        ; Color for gadgets borders.    ;    ; Initialyse ZapmanColorRequester gadgets:    ZCR_CreateGadgets()    ;    ZCR_SetText()    ZCR_SetFieldsSizeAndMargins()    ZCR_CreateTargetAndCursors()    ZCR_ResizeGadgets()    ;    ; Add ZapmanColorRequester gadgets to the gadgetlist$    *GadgetAdress = @ECGadgets\Red_Legend    Repeat      GadgetList$ + Str(PeekI(*GadgetAdress)) + ","      *GadgetAdress + SizeOf(Integer)    Until *GadgetAdress > @ECGadgets\BCancel    ;    VPos  = ECGadgets\InterBlocksVerticalPos + 5    BDefault = ButtonGadget(#PB_Any, WMargins, VPos, 170, 21, GetTextFromCatalog("ResetToDefaultColor"))    GadgetList$ + Str(BDefault) + ","    ;    TC_EnableDisableComboReadOnly(TempPresets()\Editable, gadgetPreset, BDel)    ;    TC_DisableColorGadgets(TempPresets(), ECGadgets, BDefault)    ;    #ZCR_Escape_Cmd = 1    #ZCR_Enter = 2    AddKeyboardShortcut(ECGadgets\EditColorWindow, #PB_Shortcut_Escape, #ZCR_Escape_Cmd)    AddKeyboardShortcut(ECGadgets\EditColorWindow, #PB_Shortcut_Return, #ZCR_Enter)    ;    ; Initialize cursor's positions for trackbars and gadget's colors:    ZCR_SetGadgetsFromColor(ECGadgets)    ;    SetFontAndGadgetsColors(ECGadgets\EditColorWindow, TempPresets(), GadgetList$)    ;    ; The window was invisible until now, because we created it with #PB_Window_Invisible.    ; We make it visible now.    HideWindow(ECGadgets\EditColorWindow, #False)    ;    SetActiveGadget(gadgetPreset)    ;    Repeat      Event = WaitWindowEvent()      If Event        EventType   = EventType()        EventGadget = EventGadget()        If Event = #PB_Event_Menu          EventMenu   = EventMenu()        EndIf        EventMenu   = EventMenu()        ; Manage trackbars and input events:        If TempPresets()\Editable          mColor = ECGadgets\Color           GetOut = ZCR_Events(Event, EventGadget, EventType)          If mColor <> ECGadgets\Color            If ECGadgets\SGC_ColorType$ = "TextColor"              TempPresets()\TextColor = ECGadgets\Color            Else              TempPresets()\BackgroundColor = ECGadgets\Color            EndIf            SetGadgetsColorsFromTheme(ECGadgets\EditColorWindow, TempPresets(), GadgetList$, ECGadgets\SGC_ColorType$)            TC_DisableResetGadget(TempPresets(), BDefault)          EndIf        EndIf        ;        Select Event          Case #PB_Event_Menu            If EventMenu = #ZCR_Escape_Cmd              GetOut = -1            ElseIf EventMenu = #ZCR_Enter              GetOut = 1            EndIf          Case #PB_Event_Gadget            Select EventGadget              Case gadgetPreset                If GetGadgetState(gadgetPreset) = -1                  TempPresets()\PresetName = GetGadgetText(gadgetPreset)                  SetGadgetItemText(gadgetPreset, ListIndex(TempPresets()), GetGadgetText(gadgetPreset))                Else                  SelectElement(TempPresets(), GetGadgetState(gadgetPreset))                  ;                  ; Enable/disable edition regarding the 'TempPresets()\Editable' field:                  TC_EnableDisableComboReadOnly(TempPresets()\Editable, gadgetPreset, BDel)                  ;                  TC_DisableColorGadgets(TempPresets(), ECGadgets, BDefault)                  SetGadgetsColorsFromTheme(ECGadgets\EditColorWindow, TempPresets(), GadgetList$)                  ECGadgets\Color = TC_GetRealColorFromType(ECGadgets\SGC_ColorType$, TempPresets())                  ECGadgets\BackColor = TempPresets()\BackgroundColor                  ECGadgets\TextColor = TempPresets()\TextColor                  ZCR_SetGadgetsFromColor(ECGadgets)                EndIf              Case BAdd                Index = ListIndex(TempPresets())                *TempPresetsAdr = @TempPresets()                mIndex = Index                ;                ; Look for where the new preset can be inserted (or added to the end of the list):                While mIndex + 1 < ListSize(TempPresets()) And TempPresets()\Editable = 0                  mIndex + 1                  SelectElement(TempPresets(), mIndex)                Wend                If mIndex = Index Or TempPresets()\Editable = 0                  mIndex + 1                EndIf                ;                ; Insert or add an element to the list:                If mIndex < ListSize(TempPresets())                  SelectElement(TempPresets(), mIndex)                  InsertElement(TempPresets())                Else                  AddElement(TempPresets())                EndIf                ;                ; Copy the last selected element to the new one:                CopyStructure(*TempPresetsAdr, @TempPresets(), InterfaceColorsStruct)                TempPresets()\PresetName + " (copy)"                TempPresets()\Editable = #True                TempPresets()\DefaultTextColor = -2                TempPresets()\DefaultBackgroundColor = -2                ; Update the ComboGadget:                AddGadgetItem(gadgetPreset, mIndex, TempPresets()\PresetName)                SetGadgetState(gadgetPreset, mIndex)                TC_EnableDisableComboReadOnly(TempPresets()\Editable, gadgetPreset, BDel)                TC_DisableColorGadgets(TempPresets(), ECGadgets, BDefault)                ;              Case BDel                Index = ListIndex(TempPresets())                DeleteElement(TempPresets())                RemoveGadgetItem(gadgetPreset, Index)                SetGadgetState(gadgetPreset, Index - 1)                SelectElement(TempPresets(), Index - 1)                ;                TC_EnableDisableComboReadOnly(TempPresets()\Editable, gadgetPreset, BDel)                ;                TC_DisableColorGadgets(TempPresets(), ECGadgets, BDefault)                SetGadgetsColorsFromTheme(ECGadgets\EditColorWindow, TempPresets(), GadgetList$)                ECGadgets\Color = TC_GetRealColorFromType(ECGadgets\SGC_ColorType$, TempPresets())                ECGadgets\BackColor = TempPresets()\BackgroundColor                ECGadgets\TextColor = TempPresets()\TextColor                ZCR_SetGadgetsFromColor(ECGadgets)              Case OptionBackground, OptionText                If EventGadget = OptionBackground                  ECGadgets\SGC_ColorType$ = "BackgroundColor"                Else                  ECGadgets\SGC_ColorType$ = "TextColor"                EndIf                SetGadgetsColorsFromTheme(ECGadgets\EditColorWindow, TempPresets(), GadgetList$, ECGadgets\SGC_ColorType$)                ECGadgets\Color = TC_GetRealColorFromType(ECGadgets\SGC_ColorType$, TempPresets())                ZCR_SetGadgetsFromColor(ECGadgets)              Case BDefault                If ECGadgets\SGC_ColorType$ = "BackgroundColor"                  TC_SetColorFromType(ECGadgets\SGC_ColorType$, TempPresets()\DefaultBackgroundColor, TempPresets())                Else                  TC_SetColorFromType(ECGadgets\SGC_ColorType$, TempPresets()\DefaultTextColor, TempPresets())                EndIf                SetGadgetsColorsFromTheme(ECGadgets\EditColorWindow, TempPresets(), GadgetList$, ECGadgets\SGC_ColorType$)                ECGadgets\Color = TC_GetRealColorFromType(ECGadgets\SGC_ColorType$, TempPresets())                ECGadgets\BackColor = TempPresets()\BackgroundColor                ECGadgets\TextColor = TempPresets()\TextColor                TC_DisableResetGadget(TempPresets(), BDefault)                ZCR_SetGadgetsFromColor(ECGadgets)                ;              Case ECGadgets\BOk ; OK button                GetOut = 1              Case ECGadgets\BCancel ; Cancel button                GetOut = -1            EndSelect            ;        EndSelect      EndIf    Until Event = #PB_Event_CloseWindow Or GetOut    ;    If GetOut = 1      ClearList(InterfaceColorPresets())      CopyList(TempPresets(), InterfaceColorPresets())      ForEach InterfaceColorPresets()        If InterfaceColorPresets()\DefaultTextColor = -2          InterfaceColorPresets()\DefaultTextColor = InterfaceColorPresets()\TextColor        EndIf        If InterfaceColorPresets()\DefaultBackgroundColor = -2          InterfaceColorPresets()\DefaultBackgroundColor = InterfaceColorPresets()\BackgroundColor        EndIf      Next      SelectElement(InterfaceColorPresets(), ListIndex(TempPresets()))    EndIf  EndIf  CloseWindow(ECGadgets\EditColorWindow)EndProcedure;Procedure GetColorThemesFromPreferences(MyPreferenceFile$)  ;  Protected Found, PrefString$, ColorTheme  ;  If ListSize(InterfaceColorPresets()) < 1    If OpenPreferences(MyPreferenceFile$)      Found = 0      ClearList(InterfaceColorPresets())      ExaminePreferenceKeys()      While NextPreferenceKey()        If Left(PreferenceKeyName(), Len("ColorPresets")) = "ColorPresets"          Found = 1          PrefString$ = PreferenceKeyValue()          AddElement(InterfaceColorPresets())          InterfaceColorPresets()\PresetName      = StringField(PrefString$, 1, ",")          InterfaceColorPresets()\Editable        = Val(StringField(PrefString$, 2, ","))          InterfaceColorPresets()\BackgroundColor = Val(StringField(PrefString$, 3, ","))          InterfaceColorPresets()\TextColor       = Val(StringField(PrefString$, 4, ","))          InterfaceColorPresets()\DefaultBackgroundColor = Val(StringField(PrefString$, 5, ","))          InterfaceColorPresets()\DefaultTextColor       = Val(StringField(PrefString$, 6, ","))        EndIf      Wend      ColorTheme = ReadPreferenceInteger("ColorTheme", 0)      ClosePreferences()    EndIf    If Found = 0      ; There is not theme in the preference file or the preference file doen't exist.      ; Create some prerecorded themes:      SetThemesColors()    EndIf    If ListSize(InterfaceColorPresets())      SelectElement(InterfaceColorPresets(), ColorTheme)    EndIf  Else    ColorTheme = ListIndex(InterfaceColorPresets())  EndIf  ProcedureReturn ColorThemeEndProcedure;Procedure SetColorThemesToPreferences(MyPreferenceFile$, DefaultTheme)  ;  Protected PrefString$, index  ;  If MyPreferenceFile$ And ListSize(InterfaceColorPresets()) > 0    If OpenPreferences(MyPreferenceFile$) = 0      CreatePreferences(MyPreferenceFile$)      ClosePreferences()    EndIf    ;    If OpenPreferences(MyPreferenceFile$)      ;      ; Erase old values:      ExaminePreferenceKeys()      While NextPreferenceKey()        If Left(PreferenceKeyName(), Len("ColorPresets")) = "ColorPresets"          RemovePreferenceKey(PreferenceKeyName())        EndIf      Wend      ;      ; Save actual values:      index = 0      ForEach InterfaceColorPresets()        PrefString$ = ReplaceString(InterfaceColorPresets()\PresetName, ",", "-") + ","        PrefString$ + Str(InterfaceColorPresets()\Editable) + ","        PrefString$ + Str(InterfaceColorPresets()\BackgroundColor) + ","        PrefString$ + Str(InterfaceColorPresets()\TextColor) + ","        PrefString$ + Str(InterfaceColorPresets()\DefaultBackgroundColor) + ","        PrefString$ + Str(InterfaceColorPresets()\DefaultTextColor) + ","        index + 1        WritePreferenceString("ColorPresets" + Str(index), PrefString$)      Next      WritePreferenceInteger("ColorTheme", DefaultTheme)      ClosePreferences()      SelectElement(InterfaceColorPresets(), DefaultTheme)    EndIf  EndIfEndProcedure;;;; *************************************************************************************;;-                      2--- SECOND PART: DEMO PROCEDURE ---;; *************************************************************************************;Procedure ThemesDemoWindow()  ;  Protected PresentationText$, VPos, ct, GadgetList$, MyPreferenceFile$, ColorTheme, Event  ;  If OpenWindow(0, 100, 100, 450, 360, "Themes DemoWindow", #PB_Window_ScreenCentered | #PB_Window_SystemMenu | #PB_Window_Invisible)    ApplyDarkModeToWindow(0)    ;    Enumeration GadgetNum      #TFrame      #TOption1      #TOption2      #TCheckBox      #TButton1      #TText      #TString      #TEditor      #TListView      #SepLine1      #TBSeeOtherExample      #SepLine2      #TTChooseTheme      #TCBChooseTheme      #TBEditThemes      #TBQuit    EndEnumeration    ;    PresentationText$ = "This window shows the result that SeGadgetColorEx can achieve when used to set display themes."    PresentationText$ + Chr(13) + Chr(13) + "Note that some gadgets are not fully colorized by SetGadgetColorEx. However, as you can see "    PresentationText$ + "on the left side of this text, it works for most of them."    PresentationText$ + Chr(13) + Chr(13) + "The ''Exit'' button is colored red, regardless of the display theme chosen, showing that you can combine "    PresentationText$ + "the use of themes and independent colors for certain gadgets."    PresentationText$ + Chr(13) + Chr(13) + "Use the ''Choose a theme'' combobox to change the theme, and the ''Edit themes'' button to modify them."    ; Creating two option buttons    FrameGadget(#TFrame, 10, 10, 120, 70, "Options")        OptionGadget(#TOption1, 15, 25, 100, 25, "Button #1")    OptionGadget(#TOption2, 15, 45, 100, 25, "Button #2")    ;    CheckBoxGadget(#TCheckBox, 10, 90, 100, 25, "Desable")    SetGadgetState(#TCheckBox, 1)    ButtonGadget(#TButton1, 10, 120, 100, 25, "Desabled Button")    DisableGadget(#TButton1,#True)    ;    TextGadget(#TText, 10, 150, 100, 25, "Simple text")    ;    StringGadget(#TString, 10, 170, 100, 25, "StringGadget")    ;    EditorGadget(#TEditor, 140, 10, 300, 240, #PB_Editor_WordWrap)    SetGadgetText(#TEditor, PresentationText$)    ;    ; CanvasGadget is used to create an horizontal line separator    ; in the window.    CanvasGadget(#SepLine1, 10, 265, WindowWidth(0) - 20, 1)    ;    ButtonGadget(#TBSeeOtherExample, (WindowWidth(0) - 300)/2, 275, 300, 25, "See another example with multicolor gadgets")    ;    ; CanvasGadget is used to create an horizontal line separator    ; in the window.    CanvasGadget(#SepLine2, 10, 310, WindowWidth(0) - 20, 1)    ;    VPos = WindowHeight(0) - 33    TextGadget(#TTChooseTheme, 10, VPos, 100, 25, "Choose the theme:")    ComboBoxGadget(#TCBChooseTheme, 120, VPos - 3, 100, 22)    ;    ; Initialize some presets for the themes:    MyPreferenceFile$ = GetTemporaryDirectory()+"MyPrefs.txt" ; <--- Change this line to use another pref file address.    ColorTheme = GetColorThemesFromPreferences(MyPreferenceFile$)    ;    ForEach InterfaceColorPresets()      AddGadgetItem(#TCBChooseTheme, -1, InterfaceColorPresets()\PresetName)    Next    SelectElement(InterfaceColorPresets(), ColorTheme)    SetGadgetState(#TCBChooseTheme, ColorTheme)    ;    ButtonGadget(#TBEditThemes, 230, VPos - 4, 100, 25, "Edit themes")    ;           ButtonGadget(#TBQuit, WindowWidth(0) - 100, VPos - 4, 90, 25, "Exit")    ;    ; Set a gadget list to indicate which gadgets must be colorized:    For ct = #TFrame To #TBQuit      GadgetList$ + Str(ct) + ","    Next    ;    SetGadgetsColorsFromTheme(0, @InterfaceColorPresets(), GadgetList$)    ;    ; Manage #TBQuit button color separately:    SetGadgetColorEx(#TBQuit, #PB_Gadget_FrontColor, RGB(255, 20, 20))    ;    ; The window was invisible until now, because we created it with #PB_Window_Invisible.    ; We make it visible now.    HideWindow(0, #False)    ;           Repeat      Event = WaitWindowEvent()            If Event = #PB_Event_Gadget        Select EventGadget()          Case #TBSeeOtherExample            DisableWindow(0, #True)            MulticolorDemoWindow()            DisableWindow(0, #False)            SetForegroundWindow_(WindowID(0))          Case #TCBChooseTheme            If GetGadgetState(#TCBChooseTheme) > -1              SelectElement(InterfaceColorPresets(), GetGadgetState(#TCBChooseTheme))              ;              SetGadgetsColorsFromTheme(0, @InterfaceColorPresets(), GadgetList$)              ; Manage #TBQuit button color separately:              SetGadgetColorEx(#TBQuit, #PB_Gadget_FrontColor, RGB(255, 20, 20))            EndIf          Case #TBEditThemes            DisableWindow(0, #True)            EditThemesColors()            DisableWindow(0, #False)            ClearGadgetItems(#TCBChooseTheme)            ColorTheme = ListIndex(InterfaceColorPresets())            ForEach InterfaceColorPresets()              AddGadgetItem(#TCBChooseTheme, -1, InterfaceColorPresets()\PresetName)            Next            SelectElement(InterfaceColorPresets(), ColorTheme)            SetGadgetState(#TCBChooseTheme, ColorTheme)            ;            SetGadgetsColorsFromTheme(0, @InterfaceColorPresets(), GadgetList$)            ; Manage #TBQuit button color separately:            SetGadgetColorEx(#TBQuit, #PB_Gadget_FrontColor, RGB(255, 20, 20))            ;            SetForegroundWindow_(WindowID(0))          Case #TCheckBox            If GetGadgetState(#TCheckBox)              DisableGadget(#TButton1, #True)              SetGadgetText(#TButton1, "Desabled Button")            Else              DisableGadget(#TButton1,#False)              SetGadgetText(#TButton1, "Enabled Button")            EndIf                Case #TBQuit            Break        EndSelect        ;      ElseIf Event = #PB_Event_CloseWindow        Break      EndIf    ForEver    ;    ; You will certainly want to save the presets in a 'pref' file in order to allow    ; the user to reuse some set he has modified.    ; Before calling 'ClearList' to clean memory, you can do so:    ;    MyPreferenceFile$ = GetTemporaryDirectory()+"MyPrefs.txt" ; <--- Change this line to use another pref file address.    SetColorThemesToPreferences(MyPreferenceFile$, GetGadgetState(#TCBChooseTheme))    ;    ; Then, free memory if you have not another window to colorize.    ClearList(InterfaceColorPresets())    ;    CloseWindow(0)  EndIfEndProcedure;CompilerIf #PB_Compiler_IsMainFile  ; The following won't run when this file is used as 'Included'.  ;  ThemesDemoWindow()CompilerEndIf; IDE Options = PureBasic 6.12 LTS (Windows - x86); CursorPosition = 168; FirstLine = 168; Folding = ---; EnableXP; DPIAware