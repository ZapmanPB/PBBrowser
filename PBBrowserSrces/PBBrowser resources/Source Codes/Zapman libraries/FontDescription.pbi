Global FD_KnownFontKeywords$ = ",Bold,Italic,Emboss,AllCaps,SmallCaps,Engrave,Shadow,OutLine,Underline"FD_KnownFontKeywords$ + ",StrikeThrough,StrikeOut,Hidden,Protected,Size,Spacing,Position,Kerning,BackColor"FD_KnownFontKeywords$ + ",ForeColor,Weight,Style,Name,FontName,Font,"FD_KnownFontKeywords$ = LCase(FD_KnownFontKeywords$)Procedure.s FD_NormalizeStringSyntaxe(FontDescription$)Protected mStyle$RepeatmStyle$ = FontDescription$FontDescription$ = ReplaceString(FontDescription$, " ,", ",")FontDescription$ = ReplaceString(FontDescription$, ", ", ",")FontDescription$ = ReplaceString(FontDescription$, ",,", ",")FontDescription$ = ReplaceString(FontDescription$, ";", ",")FontDescription$ = ReplaceString(FontDescription$, " (", "(")FontDescription$ = ReplaceString(FontDescription$, "( ", "(")FontDescription$ = ReplaceString(FontDescription$, ") ", ")")FontDescription$ = ReplaceString(FontDescription$, " )", ")")FontDescription$ = ReplaceString(FontDescription$, ": ", "(")FontDescription$ = ReplaceString(FontDescription$, " :", "(")FontDescription$ = ReplaceString(FontDescription$, ":", "(")Until mStyle$ = FontDescription$ProcedureReturn LCase(Trim(FontDescription$))EndProcedureProcedure.s NormalizeFontDescription(FontDescription$)Protected ct, StyleUnit$, mStyleUnit$, pp, mpp, pp2, RGBColor$, Color, ColorType$Protected NameSet, ForeColorSet, BackColorSet, SizeSet, posDepFontDescription$ = FD_NormalizeStringSyntaxe(FontDescription$)FontDescription$ = ReplaceString(FontDescription$, "font(", "name(")FontDescription$ = ReplaceString(FontDescription$, "fontname(", "name(")FontDescription$ = ReplaceString(FontDescription$, "0x", "$")posDep = 0RepeatposDep + 1pp = FindString(FontDescription$, "rgb", posDep)If ppmpp = pppp + 3While Mid(FontDescription$, pp, 1) = " "pp + 1WendIf Mid(FontDescription$, pp, 1) = "("pp + 1pp2 = ppFor ct = 1 To 3pp2 = FindString(FontDescription$, ",", pp2 + 1)If pp2 = 0pp2 = FindString(FontDescription$, ")", pp2 + 1)If pp2 = 0pp2 = Len(FontDescription$) + 1EndIfBreakEndIfNextmStyleUnit$ = Mid(FontDescription$, mpp, pp2 - mpp)RGBColor$ = Mid(FontDescription$, pp, pp2 - pp)Color = RGB(Val(StringField(RGBColor$, 1, ",")), Val(StringField(RGBColor$, 2, ",")), Val(StringField(RGBColor$, 3, ",")))FontDescription$ = ReplaceString(FontDescription$, mStyleUnit$, "$" + Hex(Color))EndIfEndIfUntil pp = 0ct = 1RepeatStyleUnit$ = StringField(FontDescription$, ct, ",")If StyleUnit$If FindString(StyleUnit$, "size")SizeSet = 1ElseIf FindString(StyleUnit$, "name")NameSet = 1ElseIf FindString(StyleUnit$, "forecolor")ForeColorSet = 1ElseIf FindString(StyleUnit$, "backcolor")BackColorSet = 1EndIfEndIfct + 1Until StyleUnit$ = ""ct = 1RepeatStyleUnit$ = StringField(FontDescription$, ct, ",")If StyleUnit$pp = FindString(StyleUnit$, "color")If ppmStyleUnit$ = StyleUnit$mpp = pppp + 5While Mid(StyleUnit$, pp, 1) = " "pp + 1WendIf Mid(StyleUnit$, pp, 1) = "("pp + 1pp2 = FindString(StyleUnit$, ")", pp)If pp2 = 0pp2 = Len(StyleUnit$) + 1EndIfColor$ = Trim(Mid(StyleUnit$, pp, pp2 - pp))If FindString(StyleUnit$, "backcolor")ColorType$ = "backcolor"BackColorSet = 1ElseColorType$ = "forecolor"ForeColorSet = 1EndIfIf Val(Color$) = 0 And Val("$" + Color$)StyleUnit$ = ColorType$ + "($" + Color$ + ")"ElseIf Str(Val(Color$)) = Color$ Or Left(Color$, 1) = "$"StyleUnit$ = ColorType$ + "($" + Hex(Val(Color$)) + ")"EndIfFontDescription$ = ReplaceString(FontDescription$, mStyleUnit$, StyleUnit$)EndIfEndIfIf FindString(StyleUnit$, "(") And FindString(StyleUnit$, ")") = 0FontDescription$ = ReplaceString(FontDescription$, StyleUnit$, StyleUnit$ + ")")FontDescription$ = ReplaceString(FontDescription$, "))", ")")EndIfEndIfct + 1Until StyleUnit$ = ""cont = 1pp = 1For ct = 1 To 4pp2 = FindString(FontDescription$, ",", pp)If pp2 = 0pp2 = Len(FontDescription$) + 1cont = 0EndIfStyleUnit$ = Mid(FontDescription$, pp, pp2 - pp)If ct = 1 And NameSet = 0If FindString(StyleUnit$, "(") = 0If FindString(FD_KnownFontKeywords$, StyleUnit$) = 0FontDescription$ = "name(" + StyleUnit$ + ")" + Mid(FontDescription$, pp2)pp2 + 6 EndIfEndIfEndIfIf ct = 2 And SizeSet = 0If FindString(StyleUnit$, "(") = 0If StrF(ValF(StyleUnit$)) = StyleUnit$ Or Str(Val(StyleUnit$)) = StyleUnit$ FontDescription$ = Left(FontDescription$, pp - 1) + "size(" + StyleUnit$ + ")" + Mid(FontDescription$, pp2)pp2 + 6 EndIfEndIfEndIfIf ct = 3 And ForeColorSet = 0If FindString(StyleUnit$, "(") = 0If Val(StyleUnit$) Or StyleUnit$ = "0" Or Left(StyleUnit$, 1) = "$"FontDescription$ = Left(FontDescription$, pp - 1) + "forecolor(" + StyleUnit$ + ")" + Mid(FontDescription$, pp2)pp2 + 10 EndIfEndIfEndIfIf ct = 4 And BackColorSet = 0If FindString(StyleUnit$, "(") = 0If Val(StyleUnit$) Or StyleUnit$ = "0" Or Left(StyleUnit$, 1) = "$"FontDescription$ = Left(FontDescription$, pp - 1) + "backcolor(" + StyleUnit$ + ")" + Mid(FontDescription$, pp2)pp2 + 10 EndIfEndIfEndIfIf contpp = pp2 + 1ElseBreakEndIfNextProcedureReturn FontDescription$EndProcedureProcedure.s FD_ExtractParameter(FontDescription$, ParameterName$, Silence = 0)Protected pa, pas, limppa = FindString(FontDescription$, LCase(ParameterName$), 1)If papa + Len(ParameterName$)If PeekC(@FontDescription$ + (pa - 1) * SizeOf(CHARACTER)) = Asc("(")pa + 1EndIfpas = palimp = Len(FontDescription$)While pa <= limp And PeekC(@FontDescription$ + (pa - 1) * SizeOf(CHARACTER)) <> Asc(")")pa + 1WendProcedureReturn PeekS(@FontDescription$ + (pas - 1) * SizeOf(CHARACTER), pa - pas)ElseIf Silence = 0MessageRequester("Error", "Error while extracting parameter: Wrong parameter name -> " + ParameterName$ + #CR$ + FontDescription$)EndIfEndProcedureMacro FD_CompleteSimpleDescription(StyleName, Description)If FindString(FontDescription$, StyleName)parameter$ = FD_ExtractParameter(FontDescription$, StyleName)If parameter$ <> "none" And parameter$ <> "0" And parameter$ <> "default"Description + ", " + UCase(Left(StyleName, 1)) + Mid(StyleName, 2)EndIfEndIfEndMacroProcedure.s SymplifyFontDescription(FontDescription$)Protected parameter$, NFontDescription$FontDescription$ = NormalizeFontDescription(FontDescription$)If FindString(FontDescription$, "name(")parameter$ = FD_ExtractParameter(FontDescription$, "name")If parameter$ And parameter$ <> "default"NFontDescription$ = UCase(Left(parameter$, 1)) + Mid(parameter$, 2)EndIfElseMessageRequester("Error", "Error while examining the font description: font name is missing -> " + #CR$ + FontDescription$)ProcedureReturnEndIfIf FindString(FontDescription$, "size(")parameter$ = FD_ExtractParameter(FontDescription$, "size")If parameter$ And parameter$ <> "default"NFontDescription$ + ", " + parameter$EndIfEndIfIf FindString(FontDescription$, "forecolor(")parameter$ = FD_ExtractParameter(FontDescription$, "forecolor")If parameter$ And parameter$ <> "default"NFontDescription$ + ", ForeColor:" + UCase(parameter$)EndIfEndIfIf FindString(FontDescription$, "backcolor(")parameter$ = FD_ExtractParameter(FontDescription$, "backcolor")If parameter$ And parameter$ <> "default"NFontDescription$ + ", BackColor:" + UCase(parameter$)EndIfEndIfFD_CompleteSimpleDescription("bold", NFontDescription$)FD_CompleteSimpleDescription("italic", NFontDescription$)FD_CompleteSimpleDescription("emboss", NFontDescription$)FD_CompleteSimpleDescription("allcaps", NFontDescription$)FD_CompleteSimpleDescription("smallcaps", NFontDescription$)FD_CompleteSimpleDescription("engrave", NFontDescription$)FD_CompleteSimpleDescription("shadow", NFontDescription$)FD_CompleteSimpleDescription("outline", NFontDescription$)FD_CompleteSimpleDescription("strikethrough", NFontDescription$)FD_CompleteSimpleDescription("strikeout", NFontDescription$)FD_CompleteSimpleDescription("subscript", NFontDescription$)FD_CompleteSimpleDescription("superscript", NFontDescription$)FD_CompleteSimpleDescription("hidden", NFontDescription$)FD_CompleteSimpleDescription("protected", NFontDescription$)FD_CompleteSimpleDescription("underline", NFontDescription$)If Left(NFontDescription$, 2) = ", "NFontDescription$ = Mid(NFontDescription$, 3)EndIfProcedureReturn NFontDescription$EndProcedureProcedure GetNumStyleFromAttributesDescription(StyleDescription$)Protected FontStyle = 0StyleDescription$ = LCase(StyleDescription$)If FindString(StyleDescription$, "italic")FontStyle = #PB_Font_ItalicEndIfIf FindString(StyleDescription$, "bold")FontStyle | #PB_Font_BoldEndIfIf FindString(StyleDescription$, "strike")FontStyle | #PB_Font_StrikeOutEndIfIf FindString(StyleDescription$, "underline")FontStyle | #PB_Font_UnderlineEndIfProcedureReturn FontStyleEndProcedureProcedure.s GetAttributesDescriptionFromNumStyle(FontStyle)Protected StyleDescription$ = ""If FontStyle & #PB_Font_ItalicStyleDescription$ + "Italic, "EndIfIf FontStyle & #PB_Font_BoldStyleDescription$ + "Bold, "EndIfIf FontStyle & #PB_Font_StrikeOutStyleDescription$ + "StrikeOut, "EndIfIf FontStyle & #PB_Font_UnderlineStyleDescription$ + "Underline, "EndIfProcedureReturn Left(StyleDescription$, Len(StyleDescription$) - 2)EndProcedureProcedure LoadFontFromDescription(FontDescription$)Protected parameter$FontDescription$ = NormalizeFontDescription(FontDescription$)If FindString(FontDescription$, "name(")parameter$ = FD_ExtractParameter(FontDescription$, "name")If parameter$ And parameter$ <> "default"Protected FontName$ = parameter$EndIfEndIfIf FindString(FontDescription$, "size(")parameter$ = FD_ExtractParameter(FontDescription$, "size")If parameter$ And parameter$ <> "default"Protected FontSize = Val(parameter$)EndIfEndIfProtected FontStyle = GetNumStyleFromAttributesDescription(FontDescription$)ProcedureReturn LoadFont(#PB_Any, FontName$, FontSize, FontStyle)EndProcedureProcedure.s GetFontName(FontID)Protected FontName$If IsFont(FontID)FontID = FontID(FontID)EndIfCompilerIf #PB_Compiler_OS = #PB_OS_MacOSProtected stringIf FontIDstring = CocoaMessage(0, FontID, "displayName") If stringFontName$ = PeekS(CocoaMessage(0, string, "UTF8String"), -1, #PB_UTF8)EndIfEndIfCompilerElseIf #PB_Compiler_OS = #PB_OS_WindowsProtected hdc = GetDC_(#Null)Protected oldFont = SelectObject_(hdc, FontID)FontName$ = Space(#LF_FACESIZE) GetTextFace_(hdc, #LF_FACESIZE, @FontName$)If FontName$ = "" : FontName$ = "Arial" : EndIfSelectObject_(hdc, oldFont)ReleaseDC_(#Null, hdc)CompilerEndIfProcedureReturn FontName$EndProcedureProcedure.f GetFontSize(FontID)Protected FpointSize.fIf IsFont(FontID)FontID = FontID(FontID)EndIfCompilerIf #PB_Compiler_OS = #PB_OS_MacOSProtected pointSize.CGFloat = 0.0If FontIDCocoaMessage(@pointSize, FontID, "pointSize")EndIfFpointSize = pointSizeProcedureReturn FpointSizeCompilerElseIf #PB_Compiler_OS = #PB_OS_WindowsProtected finfo.LOGFONTProtected hdc = GetDC_(#Null) If GetObject_(FontID, SizeOf(LOGFONT), @finfo.LOGFONT)FpointSize = -finfo\lfHeight * 72 / GetDeviceCaps_(hdc, #LOGPIXELSY)EndIfProcedureReturn FpointSizeCompilerEndIfEndProcedureProcedure.s GetFontStyles(FontID)Protected lf.LOGFONT, Purelf.LOGFONTProtected StyleDescription$If IsFont(FontID)FontID = FontID(FontID)EndIfIf GetObject_(FontID, SizeOf(LOGFONT), @lf)FontName$ = PeekS(@lf\lfFaceName, -1, #PB_Unicode)PureFont = LoadFont(#PB_Any, FontName$, 9)If GetObject_(FontID(PureFont), SizeOf(LOGFONT), @Purelf)If lf\lfWeight > Purelf\lfWeightStyleDescription$ = "Bold, "ElseIf lf\lfWeight < Purelf\lfWeightStyleDescription$ = "Light, "EndIfEndIfFreeFont(PureFont)If lf\lfItalicStyleDescription$ + "Italic, "EndIfIf lf\lfUnderlineStyleDescription$ + "Underline, "EndIfIf lf\lfStrikeOutStyleDescription$ + "StrikeOut, "EndIfProcedureReturn Left(StyleDescription$, Len(StyleDescription$) - 2)EndIfEndProcedureProcedure.s GetFontDescription(FontID)Protected FontDescription$ = GetFontName(FontID) + ", " + GetFontSize(FontID)Protected StyleDescription$ = GetFontStyles(FontID)If StyleDescription$FontDescription$ + ", " + StyleDescription$EndIfProcedureReturn FontDescription$EndProcedureCompilerIf #PB_Compiler_IsMainFileFont = LoadFontFromDescription("arial,12,bold")Description$ = GetFontDescription(Font)FreeFont(Font)Debug "Simple description: " + Description$Debug "Normalized description: " + NormalizeFontDescription(Description$)CompilerEndIf; DPIAware